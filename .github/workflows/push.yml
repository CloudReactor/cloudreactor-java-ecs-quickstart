name: Check and Deploy
on:
  push:
    branches: [ "**" ]
    paths-ignore:
      - '*.md'
  workflow_dispatch:
    inputs:
      deploy:
        description: "Set to 'true' to deploy to AWS ECS and CloudReactor"
        required: false
        default: "true"
      deployment_environment:
        description: "Environment to deploy to"
        required: false
        default: "staging"

jobs:
  check_and_deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          # Should match version in the Dockerfile
          java-version: '17.0.2'
          distribution: 'temurin'
      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1
      - name: Build and test with Gradle
        uses: gradle/gradle-build-action@v2
        with:
          arguments: build
      - name: Deploy to AWS ECS and CloudReactor
        uses: CloudReactor/aws-ecs-cloudreactor-deployer@v2.0.2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-1"
          # Omit or change to https://api.cloudreactor.io for you own projects
          cloudreactor-api-base-url: ${{ secrets.CLOUDREACTOR_API_BASE_URL }}
          cloudreactor-deploy-api-key:  ${{ secrets.CLOUDREACTOR_DEPLOY_API_KEY }}
          # Fill this in if you encrypt deploy_config/vars/xxx.yml because it
          # contains secret values.
          # ansible-vault-password: ""
          # Change to the name of the deployment environment to deploy to after
          # pushing. This normally is a staging environment that has the same
          # name as the Run Environment in CloudReactor.
          deployment-environment: ${{ github.event.inputs.deployment_environment || 'staging' }}
          log-level: DEBUG
        if: (github.ref == 'refs/heads/master') || (github.event.inputs.deploy == 'true')
      - name: Print final message
        run: "echo Complete!"

